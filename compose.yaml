services:
  postgres-master-container:
    image: postgres:latest
    container_name: cherhy-master-postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - master-data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    command: >
      postgres -c wal_level=replica -c max_wal_senders=3 -c wal_keep_size=64MB -c hot_standby=on

  postgres-slave-container:
    image: postgres:latest
    container_name: cherhy-slave-postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MASTER_SERVICE_HOST: cherhy-postgres-master
      POSTGRES_MASTER_SERVICE_PORT: 5432
    ports:
      - "5433:5432"
    depends_on:
      - postgres-master-container
    volumes:
      - slave-data:/var/lib/postgresql/data
    command: >
      postgres -c hot_standby=on

  mongo-container:
    image: mongo:latest
    container_name: cherhy-mongo
    ports:
      - "27017:27017"
    volumes:
      - ./third-party/mongo/data:/data/db
    restart: always

  redis-container:
    image: redis:latest
    container_name: cherhy-redis
    ports:
      - "6379:6379"
    volumes:
      - ./third-party/redis/data:/data
      - ./third-party/redis/conf/redis.conf:/usr/local/conf/redis.conf
    labels:
      - "name=redis"
      - "mode=standalone"
    restart: always
    command: redis-server /usr/local/conf/redis.conf

  zookeeper:
    image: 'confluentinc/cp-zookeeper:latest'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - '2181:2181'

  kafka:
    image: 'confluentinc/cp-kafka:latest'
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CREATE_TOPICS: >
        checkout.complete.v1:5:1,
        checkout.aggregate.v1:5:1

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    networks:
      - cherhy-network
    ports:
      - "9000:8080"
    restart: always
    depends_on:
      - kafka
      - zookeeper
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

  kafka-connect:
    image: 'confluentinc/cp-kafka-connect:latest'
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_GROUP_ID: "quickstart-avro"
      CONNECT_CONFIG_STORAGE_TOPIC: "docker-connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "docker-connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "docker-connect-status"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      CONNECT_PLUGIN_PATH: "/usr/share/java,/etc/kafka-connect/jars"
    volumes:
      - ./third-party/kafka-connect-plugins:/etc/kafka-connect/jars
    depends_on:
      - kafka
    command:
      - bash
      - -c
      - |
        confluent-hub install --no-prompt confluentinc/kafka-connect-elasticsearch:11.0.4 && \
        /etc/confluent/docker/run

  axon-server:
    container_name: axon-server
    image: axoniq/axonserver:4.6.3-jdk-11-dev
    networks:
      - cherhy-network
    ports:
      - "8124:8124"
    volumes:
      - axonserver-data:/axonserver/data
      - axonserver-events:/axonserver/events
      - axonserver-config:/axonserver/config:ro

  gateway:
    container_name: gateway
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "10100:8080"

  payment:
    container_name: payment
    build:
      context: ./payment
      dockerfile: Dockerfile
    ports:
      - "10101:8080"
    depends_on:
      - postgres-master-container
      - postgres-slave-container
      - mongo-container
      - redis-container
      - axon-server
      - gateway

  stream:
    container_name: stream
    build:
      context: ./stream
      dockerfile: Dockerfile
    ports:
      - "10102:8080"
    environment:
      - PORT=10102
    depends_on:
      - postgres-master-container
      - postgres-slave-container
      - mongo-container
      - redis-container
      - axon-server
      - gateway

  user:
    container_name: user
    build:
      context: ./user
      dockerfile: Dockerfile
    ports:
      - "10103:8080"
    depends_on:
      - postgres-master-container
      - postgres-slave-container
      - mongo-container
      - redis-container
      - axon-server
      - gateway

  schedule:
    container_name: schedule
    build:
      context: ./schedule
      dockerfile: Dockerfile
    ports:
        - "10104:8080"
    depends_on:
        - postgres-master-container
        - postgres-slave-container
        - mongo-container
        - redis-container
        - axon-server
        - gateway

volumes:
  axonserver-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${PWD}/third-party/axon-server-se/data
  axonserver-events:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${PWD}/third-party/axon-server-se/events
  axonserver-config:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${PWD}/third-party/axon-server-se/config
  master-data:
  slave-data:

networks:
  cherhy-network:
    driver: bridge